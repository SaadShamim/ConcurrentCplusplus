#include "station.h"
#include <vector>
#include <iostream>
#include "PRNG.h"

vector<Station *> Station::active;
unsigned int Station::value;
Station* Station::coordinator;

extern PRNG myPrng;

///MAKE VALUE GLOBAl

void Station::main() {
//	printf("derp");
	suspend();
	Station *This = this;
	
	try {
		
		_Enable {   
			//move this UPPP
			
			// allow delivery of nonlocal exceptions
			                   // establish starter for termination
			
		  // _Enable
	while(true){
		//basecase
		
		if(myPartner->idx == idx){
			break;
		}
		
	
	while(myPartner->failed()){
		
		/*if(myPartner->idx == coordinator->idx){
			cerr << "should ****************call election" << endl;
		}*/
		
		//cerr << idx << " 's partner failed: " << myPartner->idx << endl;
		//frame going to failed partner
		if(fdstId == myPartner->idx){
			if(fFrameType == ACK || fFrameType == NACK){
				//convert to token
				fFrameType = TOKEN;
				fdstId = idx;
			} else if(fFrameType == DF){
				
				if(fsrcId == fdstId){
					//covert to token
					fFrameType = TOKEN;
					fdstId = idx;
				}else{
					//convert to nack
					fFrameType = NACK;
					fdstId = fsrcId;
					fsrcId = idx;
				}
				
			}
		}
		
		if(myPartner->idx == coordinator->idx){
				cerr << "****************call election" << endl;
			
				starterFlag = idx; //erase later, check ur coordinator==partner instead
				_Resume Election(*this) _At *(myPartner->partner());
				myPartner->partner()->vote();
			
			
			
			
			//cerr << "new coordinator: " << coordinator->idx << endl;
			
				
			/*	try {
					_Enable {   
						//move this UPPP
						
						// allow delivery of nonlocal exceptions
						suspend();                    // establish starter for termination
					} // _Enable */
			
				/*} _CatchResume(Election &election) (Station *This)    {
					//deal with election
					if((election.candidate).id() > This->id() || This->iFailed){
						_Resume Election(election.candidate) _At *(This->partner());
					}else{
						_Resume Election(*This) _At *(This->partner());
					}
					(This->partner())->vote();
				} // try*/
		}
		cerr << "calling delete" << endl;	
		myPartner = coordinator->remove(myPartner);
	}
	
	//my partner is active
	//cerr << "partner active" << endl;
	//generate failed random number
	int x = myPrng(0, failurex-1);
	if(x==0){
		//cout << idx << " will fail" << endl;
		iFailed = true;
	}


	
	if(myPartner->idx == idx){
		break;
	}

	
	Frame tmpFrame;
	cerr << "heading into active" << endl;	
	//analyize frame
	if(fFrameType == TOKEN){
		cerr << "have token" << endl;
		//should I hold or release token?
		if(holdCounter == 0){
			//reset counter
			holdCounter = myPrng(1,3);
			value++;
			int dstIndex = myPrng(active.size()-1);
			//create dataframe
			tmpFrame.type = DF;
			tmpFrame.value = value;
			tmpFrame.srcId = idx;
			tmpFrame.dstId =  active[dstIndex]->idx;
			//send dataframe
			myPartner->transmit(tmpFrame);
		}else{
			holdCounter--;
			tmpFrame.type = TOKEN;
			tmpFrame.value = value;
			tmpFrame.srcId = idx; //doesn't matter, never checked
			tmpFrame.dstId = myPartner->idx; //doesn't matter never checked
			myPartner->transmit(tmpFrame);
		}	
	} else if(fFrameType == NACK || fFrameType==ACK){
		cerr << "have NACK" << endl;
		if(fdstId == idx){
			tmpFrame.type = TOKEN;
			tmpFrame.value = value;
			tmpFrame.srcId = idx; //doesn't matter, never checked
			tmpFrame.dstId = myPartner->idx; //doesn't matter never checked
			myPartner->transmit(tmpFrame);
		}else{
			//pass frame
			tmpFrame.type = fFrameType;
			tmpFrame.value = fValue;
			tmpFrame.srcId = fsrcId; //doesn't matter, never checked
			tmpFrame.dstId = fdstId; //doesn't matter never checked
			myPartner->transmit(tmpFrame);
		}
	} else if(fFrameType == DF){
		cerr << "have dataframe" << endl;
		if(fdstId == idx){
			tmpFrame.type = ACK;
			tmpFrame.value = value;
			tmpFrame.srcId = idx; 
			tmpFrame.dstId = fsrcId; 
			myPartner->transmit(tmpFrame);
		}else{//pass on the data frame
			tmpFrame.type = fFrameType;
			tmpFrame.value = fValue;
			tmpFrame.srcId = fsrcId; //doesn't matter, never checked
			tmpFrame.dstId = fdstId; //doesn't matter never checked
			myPartner->transmit(tmpFrame);
		}
	}
		

	}//end while
			
		} //close Enable
	} _CatchResume(Election &election) (Station *This)    {
		//deal with election
		if(This->partner() != Station::coordinator){
			if((election.candidate).id() > This->id() || This->iFailed){
				_Resume Election(election.candidate) _At *(This->partner());
			}else{
				_Resume Election(*This) _At *(This->partner());
			}
			
			(This->partner())->vote();
		}else{
			(Station::coordinator) = &(election.candidate);
			
		}
	} // try
	
	cerr << "coordinators id: " << coordinator->idx << "my id: " << idx << "vector size: " << active.size() << endl;
	cerr << "Now returning (hopefully to the real main)" << endl;
//	suspend();
	return;
}

void Station::check(){
//	cout << Station::active[0].id() << endl;
//	cout << Station::active[0].failed() << endl;
}

Station::Station(unsigned int id , unsigned int failure) : idx(id),failurex(failure){
	cerr << "Constructor ID: " << idx << "Given ID: " << id << endl;
	active.push_back(this);
	//cout <<	active.size() << endl;
	
}

unsigned int Station::id(){
	return idx;
}

bool Station::failed(){
	return iFailed;
}

void Station::transmit(const Frame &f){
	cerr << "starting transmit: " << idx << endl;
	fFrameType = f.type;
	fValue = f.value;
	fsrcId = f.srcId;
	fdstId = f.dstId;
	//cerr << "Activity Size" << active.size() << endl;
	//cerr << fFrameType << fValue << fsrcId << fdstId << myPartner->idx << endl;
	resume();
	
	cerr << "Activity Size" << active.size() << endl;
	cerr << "ending transmission: " << idx << endl;
	//cerr << "Came out of back of resume in transmit properly" << endl;
}

void Station::start(Station *partner){
	holdCounter = myPrng(1);
	iFailed = 0;
	//cerr << "initial iFailed:" << iFailed << endl;
	//cerr << "id: " << idx << " holdCounter: " << holdCounter << endl;
	myPartner = partner;
	resume();
	cout << idx << "Partner ID: " << myPartner->idx << endl;
}

Station* Station::remove(Station *victim){
	cerr <<"removing():" << endl;
	cerr << "current: " << idx << " removing: " << victim->idx << endl;
	cerr << "coordinator: " << coordinator->idx << endl;
	cerr << "active size: " << active.size() << endl;

	Station *newPartner;
	for(unsigned int i=0; i<active.size(); i++){
		if(active[i]->idx == victim->idx){
			newPartner = active[i]->partner();
			//delete active[i];
			cerr << "should delete at index: " << i << endl;
			
			for(int j=0;j<active.size();j++){
				cerr << active[j]->id() << ", ";
			}
			cerr << endl;
			active.erase(active.begin()+i);
			cerr << "after delete: " << endl;	
			for(int j=0;j<active.size();j++){
				cerr << active[j]->id() << ", ";
			}
			cerr << endl;
			break;
		}
	}
	delete victim;	
	cerr << "active size: " << active.size() << endl;
	return newPartner; 
}

Station* Station::partner(){
	return myPartner;
}

void Station::vote(){
	resume();
	cerr << "after resume in vote, current id: " << idx << endl;
}

