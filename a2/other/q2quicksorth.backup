template<typename T> _Task QuickSort {
	T *array;
	int low;
	int high;
	unsigned int depth;

	
	int partition(T sequence[], int low, int high,int pivot){
		
		swap(sequence[pivot], sequence[high]);

		int entryIndex = low;

		for(int i=low; i<high; i++){
			if(sequence[i] < sequence[high]){
				swap(sequence[entryIndex], sequence[i]);
				entryIndex++;
			}
		}
		
		swap(sequence[entryIndex], sequence[high]);
		
		return entryIndex;	
	}

	void runQuickSort(T sequence[], int low, int high, unsigned int depth){
		int newPivot;

		if(low < high){
			int pivot = low +(high-low)/2;
			newPivot = partition(sequence,low,high, pivot);
			
			if(depth > 0){
				QuickSort q1(sequence, low, newPivot-1, depth-1);
				QuickSort q2(sequence, newPivot + 1, high, depth-1);
			}else{
				runQuickSort(sequence, low, newPivot-1, 0);
				runQuickSort(sequence, newPivot + 1, high, 0);
			}
		}
	}
	
	void main() {
		runQuickSort(array, low, high, depth);
	}
	
  public:
    QuickSort(T array[], int low, int high, unsigned int depth ): array(array), low(low), high(high), depth(depth){}
};

void swap(int &a, int &b){
	int tmp = a;
	a = b;
	b = tmp;
}

unsigned int uDefaultStackSize() {
return 512 * 1000;
// set task stack-size to 512K
}



