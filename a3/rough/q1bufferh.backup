#include <uC++.h>
#include <vector>
#include <iostream>
using namespace std;

template<typename T> class BoundedBuffer {

  int buffSize;

  //make these private?
  uOwnerLock mlk; 
  uCondLock pClk;
  uCondLock cClk;

  //use t? gave error?
  vector<int> buff;


  public:

    BoundedBuffer( const unsigned int size = 10 ){
	buffSize = size;
    }

    void insert( T elem ){
    	#ifdef BUSY 

    	mlk.acquire();
    	
    	while(buff.size() == (int)buffSize){
    		pClk.wait(mlk);
    	}
	
	cerr << " prod active " << endl;
	
	assert(buff.size() != buffSize);
    	buff.push_back(elem);
    	
    	cerr << "prod added element, size is now: " << buff.size() << endl;

    	cClk.signal();

	cerr << " consumer signaled " << endl;

    	mlk.release();
    	
    	#endif // BUSY     	
    }

    T remove(){
	#ifdef BUSY 

	mlk.acquire();

	while(buff.size() == 0){
		cClk.wait(mlk);
	}

	assert(!buff.empty());
	T x = buff.at(0);
	cerr << "cons poped of value: " << x << endl;
	buff.erase(buff.begin());

	pClk.signal();

	mlk.release();
	
	return x;
	
	#endif // BUSY 
    }
};

_Task Producer {
    BoundedBuffer<int> *buffer;
    const int Produce;
    const int Delay;
    
    void main();
  public:
    Producer( BoundedBuffer<int> &buffer, const int Produce, const int Delay ):buffer(&buffer), Produce(Produce),Delay(Delay) {}
};

_Task Consumer {
    BoundedBuffer<int> *buffer;
    const int Delay;
    int Sentinel;
    int *sum;
    
    void main();
  public:
    Consumer( BoundedBuffer<int> &buffer, const int Delay, const int Sentinel, int &sum ):buffer(&buffer),Delay(Delay),Sentinel(Sentinel),sum(&sum){}
};
